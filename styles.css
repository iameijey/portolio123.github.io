/* The :root pseudo-class is often used for defining global CSS variables (also known as custom properties) that can be used throughout the stylesheet. By defining variables on the :root element, you ensure that they are accessible globally across the entire document. */
:root {
    --font-family: Roboto, sans-serif;
    --primary-color: #F1F1F1;
    --primary-color-dark: #2199EB;
    --secondary-color: #EB4721;
    --text-dark: #141414;
    --text-light: #F1F1F1;
    --extra-light: #F1F1F1;
    --max-width: 1200px;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

a {
    text-decoration: none;
}

body {
    font-family: var(--font-family);
    /* margin-bottom: 1200px; */
}

nav {
    width: 100%;
    position:fixed;
    top: 0;
    left: 0;
    background-color: #333333;
    z-index: 99;
}

.nav_content {
    max-width: var(--max-width);
    margin: auto;
    padding: 1.5rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

nav .logo a {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--primary-color);
    transition: .3s;
}

nav .logo a:hover {
    color: var(--primary-color-dark);
}

nav .checkbox {
    display: none;
}

nav input {
    display: none;
}

nav .checkbox i {
    font-size: 2rem;
    color: var(--primary-color);
    cursor: pointer;
}

ul {
    display: flex;
    align-items: center;
    gap: 1rem;
    list-style: none;
    transition: left 0.3s;
}

ul li a {
    padding: .5rem 1rem;
    border: 2px solid transparent;
    text-decoration: none;
    font-weight: 600;
    color: var(--text-light);
    transition: 0.3s;
}

ul li a:hover {
    border-top-color: var(--secondary-color);
    border-bottom-color: var(--secondary-color);
    color: var(--secondary-color);
}

.section {
    background-color: var(--extra-light);
}

.section_container {
    min-height: 100vh;
    max-width: var(--max-width);
    margin: auto;
    padding: 1rem;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 4rem;
}

.content {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.subtitle {
    letter-spacing: 2px;
    color: var(--text-dark);
    font-weight: 600;
    margin-bottom: .5rem;
}

.title {
    font-size: 2.5rem;
    font-weight: 400;
    line-height: 3rem;
    color: var(--text-dark);
    margin-bottom: 1rem;
}

.title span {
    font-weight: 600;
}

.description {
    line-height: 1.5rem;
    color: var(--text-dark);
    margin-bottom: 2rem;
}

.action_btns {
    display: flex;
    gap: 1rem;
}

.action_btns button {
    font-size: 1rem;
    font-weight: 600;
    letter-spacing: 2px;
    padding: 1rem 2rem;
    outline: none;
    border: 2px solid var(--primary-color-dark);
    border-radius: 10px;
    transition: 0.3s;
    cursor: pointer;
}

.hire_me {
    background-color: var(--primary-color-dark);
    color: #f1f1f1;
}

.hire_me:hover {
    background-color: var(--primary-color-light);
    color: var(--primary-color-dark);
}

.portfolio {
    color: var(--primary-color-dark);
}

.portfolio:hover {
    background-color: var(--primary-color-dark);
    color: #f1f1f1;
}

.image {
    display: grid;
    place-items: center;
}

.image img {
    /* 
    The expression min(25rem, 90%) calculates the width of an element to be the smaller of 25rem or 90% of the parent elementâ€™s width. This is useful when you want to ensure that an element doesn't exceed a certain width but can shrink responsively based on the available space.
     */
    width: min(25rem, 90%);
    border-radius: 100%;
}

@media (max-width: 600px) {
    nav .checkbox {
        display: block;
    }

    ul {
        position: absolute;
        width: 100%;
        top: 100px;
        /* 
        calc(): This is a CSS function that allows you to perform calculations to determine CSS property values. It can handle various mathematical operations like addition (+), subtraction (-), multiplication (*), and division (/).

        100vh: The vh unit stands for "viewport height." It represents 1% of the height of the viewport. So, 100vh equals 100% of the viewport height, effectively covering the entire visible height of the browser window.

        85px: This is a fixed value in pixels. In this context, it represents a specific height, such as the height of a header or navigation bar, that you want to subtract from the total height.
        */
        height: calc(100vh - 85px);
        left: -100%;
        background-color: var(--extra-light);
        flex-direction: column;
        justify-content: center;
        gap: 3rem;
    }

    nav #check:checked ~ ul {
        left: 0;
    }

    ul li a {
        font-size: 1.2rem;
        color: var(--text-dark);
    }

    .section_container {
        padding: 10rem 1rem 5rem 1rem;
        text-align: center;
        grid-template-columns: repeat(1, 1fr);
    }

    .image {
        grid-area: 1/1/2/2;
    }

    .action_btns {
        margin: auto;
    }
}